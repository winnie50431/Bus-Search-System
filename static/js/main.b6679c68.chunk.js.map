{"version":3,"sources":["api/helper.js","components/Menu/Menu.js","components/Map/styles.js","components/Map/Map.js","components/Navbar/styles.js","pages/Homepage.js","App.js","index.js","api/auth.js","api/services.js","components/List/List.js"],"names":["global","helper","formatTime","seconds","min","parseInt","sec","Menu","coordinates","setCoordinates","stations","setStations","setRouteName","useState","stops","setStops","currentStation","setCurrentStation","description","setDescription","useEffect","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","error","console","log","code","message","BusService","getNearby","then","data","length","stationID","StationID","address","StationAddress","result","find","station","Stops","name","id","onChange","e","target","value","disabled","map","StationName","Zh_tw","routeName","stop","RouteName","RouteID","onClick","preventDefault","makeStyles","paper","padding","display","flexDirection","justifyContent","width","mapContainer","height","markerContainer","transform","zIndex","pointer","cursor","Map","classes","useStyles","useMediaQuery","stopsData","setStopsData","getStopOfRoute","catch","err","StopMarker","text","style","color","background","textAlign","alignItems","borderRadius","AnyReactComponent","className","defaultCenter","center","defaultZoom","margin","yesIWantToUseGoogleMapApiInternals","onChildClick","StopSequence","StopPosition","PositionLat","PositionLon","theme","title","breakpoints","up","search","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","searchIcon","pointerEvents","inputRoot","inputInput","paddingLeft","transition","transitions","create","toolbar","Homepage","CssBaseline","Grid","container","item","xs","List","App","basename","path","element","ReactDOM","render","StrictMode","document","getElementById","GetAuthorizationHeader","GMTString","Date","toGMTString","ShaObj","jsSHA","setHMACKey","process","update","Authorization","getHMAC","a","url","options","headers","axios","get","res","getEstimateTime","timeData","setTimeData","EstimateTime","StopName"],"mappings":"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","file":"static/js/main.b6679c68.chunk.js","sourcesContent":["const formatTime = (seconds) => {\r\n    let min = parseInt( seconds / 60 );\r\n    let sec = (seconds % 60 );\r\n  return `${min}:${sec}`\r\n};\r\n\r\nglobal.helper = {\r\n  formatTime,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport BusService from \"../../api/services\";\r\n\r\nconst Menu = ({\r\n  coordinates,\r\n  setCoordinates,\r\n  stations,\r\n  setStations,\r\n  setRouteName,\r\n}) => {\r\n  /** form data\r\n   * 1. get current coordinates\r\n   * 2. get the station nearby and set current\r\n   * 3. get routes\r\n   */\r\n  const [stops, setStops] = useState([]);\r\n  const [currentStation, setCurrentStation] = useState(null); // current station\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  // 1. get current coordinates (lat: 緯度; lng: 經度)\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setCoordinates({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error.code, error.message);\r\n        }\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  // 2. get the stations nearby and show\r\n  useEffect(() => {\r\n    BusService.getNearby(coordinates).then((data) => {\r\n      if (data.length) {\r\n        // 2.1 get the stations nearby\r\n        setStations(data);\r\n        // 2.2 set default station ( current station )\r\n        const stationID = data[0].StationID;\r\n        setCurrentStation(stationID);\r\n        // 2.3 set description\r\n        const address = data[0].StationAddress;\r\n        setDescription(address);\r\n      }\r\n    });\r\n    console.log(coordinates);\r\n  }, [coordinates]);\r\n\r\n  // 3. get routes\r\n  useEffect(() => {\r\n    console.log({ currentStation });\r\n    if (stations && currentStation) {\r\n      // 3.1 get routes of current\r\n      const result = stations.find(\r\n        (station) => station.StationID === currentStation\r\n      );\r\n      // 3.1 get routes of current\r\n      if (result) {\r\n        const stops = result.Stops;\r\n        setStops(stops);\r\n        const address = result.StationAddress;\r\n        setDescription(address);\r\n      }\r\n    }\r\n  }, [currentStation]);\r\n\r\n  const routeSelectHandler = (e) => {\r\n    const routeName = e.target.value;\r\n    setRouteName(routeName);\r\n  };\r\n\r\n  const stationSelectHandler = (e) => {\r\n    const stationID = e.target.value;\r\n    setCurrentStation(stationID);\r\n  };\r\n\r\n  const search = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  /** List data */\r\n\r\n  return (\r\n    <section>\r\n      <form>\r\n        <p>乘車位址:</p>\r\n        <p>{description}</p>\r\n        <select\r\n          name=\"stationSelect\"\r\n          id=\"stationSelect\"\r\n          onChange={stationSelectHandler}\r\n        >\r\n          <option value=\"\" disabled>\r\n            站牌\r\n          </option>\r\n          {stations.map((station) => {\r\n            return (\r\n              <option value={station.StationID} key={station.StationID}>\r\n                {station.StationName.Zh_tw}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n        <select\r\n          name=\"routeSelect\"\r\n          id=\"routeSelect\"\r\n          onChange={routeSelectHandler}\r\n        >\r\n          <option value=\"\">路線名稱</option>\r\n          {stops.length\r\n            ? stops.map((stop) => (\r\n                <option value={stop.RouteName.Zh_tw} key={stop.RouteID}>\r\n                  {stop.RouteName.Zh_tw}\r\n                </option>\r\n              ))\r\n            : \"\"}\r\n        </select>\r\n        <button onClick={search}>Search</button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(() => ({\r\n  paper: {\r\n    padding: \"10px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    width: \"100px\",\r\n  },\r\n  mapContainer: {\r\n    height: \"85vh\",\r\n    width: \"100%\",\r\n  },\r\n  markerContainer: {\r\n    position: \"absolute\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    zIndex: 1,\r\n    \"&:hover\": { zIndex: 2 },\r\n  },\r\n  pointer: {\r\n    cursor: \"pointer\",\r\n  },\r\n}));\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport BusService from \"../../api/services\";\r\nimport { Paper, Typography, useMediaQuery } from \"@material-ui/core\";\r\nimport LocationOnOutlined from \"@material-ui/icons/LocationOnOutlined\";\r\nimport useStyles from \"./styles\";\r\nimport { LoadScript, Marker } from \"@react-google-maps/api\";\r\n\r\nconst Map = ({ coordinates, routeName }) => {\r\n  const classes = useStyles();\r\n  const isMobile = useMediaQuery(\"(min-width: 600px)\");\r\n  const [ stopsData, setStopsData ] = useState(null);\r\n  // let stopsData = [];\r\n\r\n  useEffect(() => {\r\n    if (routeName) {\r\n      BusService.getStopOfRoute(routeName)\r\n        .then((data) => {\r\n          setStopsData(data)\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [routeName]);\r\n\r\n  const StopMarker = ({ text }) => (\r\n    <div\r\n      style={{\r\n        color: \"white\",\r\n        background: \"red\",\r\n        padding: \"10px 10px\",\r\n        display: \"inline-flex\",\r\n        textAlign: \"center\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        borderRadius: \"100%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n      }}\r\n    >\r\n      {text}\r\n    </div>\r\n  );\r\n\r\n  const AnyReactComponent = ({ text }) => (\r\n    <div\r\n      style={{\r\n        color: \"white\",\r\n        background: \"grey\",\r\n        padding: \"15px 10px\",\r\n        display: \"inline-flex\",\r\n        textAlign: \"center\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        borderRadius: \"100%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n      }}\r\n    >\r\n      {text}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.mapContainer}>\r\n      <GoogleMapReact\r\n        // bootstrapURLKeys={{\r\n        //   key: process.env.REACT_APP_MAPSTOKEN,\r\n        // }}\r\n        defaultCenter={coordinates}\r\n        center={coordinates}\r\n        defaultZoom={14}\r\n        margin={[50, 50, 50, 50]}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        // options={\"\"}\r\n        // onChange={\"\"}\r\n        onChildClick={(e) => console.log(e)}\r\n      >\r\n        <AnyReactComponent\r\n          text={\"My house\"}\r\n          key={1}\r\n          lat={coordinates.lat}\r\n          lng={coordinates.lng}\r\n        />\r\n        { stopsData && (stopsData.length>0) ?\r\n          stopsData[0].Stops.map((stop) => (\r\n            <StopMarker\r\n              text={stop.StopSequence}\r\n              lat={stop.StopPosition.PositionLat}\r\n              lng={stop.StopPosition.PositionLon}\r\n            />\r\n          )) : null }\r\n      </GoogleMapReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import { alpha, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  title: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n  },\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    \"&:hover\": { backgroundColor: alpha(theme.palette.common.white, 0.25) },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: \"auto\",\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"md\")]: { width: \"20ch\" },\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n}));\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Menu from \"../components/Menu/Menu\";\r\nimport List from \"../components/List/List\";\r\nimport Map from \"../components/Map/Map\";\r\n// import { getData, getStationData } from \"../api/services\";\r\nimport Navbar from \"../components/Navbar/Navbar\";\r\nimport { CssBaseline, Grid } from \"@material-ui/core\";\r\n\r\nconst Homepage = () => {\r\n  const [coordinates, setCoordinates] = useState({ lat: 0, lng: 0 }); // current position\r\n  const [stations, setStations] = useState([]); // All data of stations nearby\r\n  const [routeName, setRouteName] = useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <Grid container spacing={3} style={{ width: \"100%\" }}>\r\n        <Grid item xs={12}>\r\n          {/* <Navbar setCoordinates={setCoordinates} /> */}\r\n          <Menu\r\n            coordinates={coordinates}\r\n            stations={stations}\r\n            setCoordinates={setCoordinates}\r\n            setStations={setStations}\r\n            setRouteName={setRouteName}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Map coordinates={coordinates} routeName={routeName} />\r\n          {/* <GoogleMap coordinates={coordinates} /> */}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <List routeName={routeName} />\r\n        </Grid>\r\n      </Grid>\r\n      {/* <CssBaseline />\r\n      <Navbar />\r\n      <Grid container spacing={3} style={{ width: \"100%\" }}>\r\n        <Grid item xs={12} md={4}>\r\n          <List />\r\n        </Grid>\r\n        <Grid item xs={12} md={8}>\r\n          <Map coordinates={coordinates} stations={stations} />\r\n        </Grid>\r\n      </Grid> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","import React from \"react\";\nimport Homepage from \"./pages/Homepage\";\nimport { BrowserRouter as HashRouter, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/Bus-Search-System\">\n      <Routes>\n        <Route path=\"/\" element={<Homepage />} />\n      </Routes>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import jsSHA from \"jssha\";\r\n\r\nexport function GetAuthorizationHeader() {\r\n  var AppID = process.env.REACT_APP_ID;\r\n  var AppKey = process.env.REACT_APP_KEY;\r\n\r\n  var GMTString = new Date().toGMTString();\r\n  var ShaObj = new jsSHA(\"SHA-1\", \"TEXT\");\r\n  ShaObj.setHMACKey(AppKey, \"TEXT\");\r\n  ShaObj.update(\"x-date: \" + GMTString);\r\n  var HMAC = ShaObj.getHMAC(\"B64\");\r\n  var Authorization =\r\n    'hmac username=\"' +\r\n    AppID +\r\n    '\", algorithm=\"hmac-sha1\", headers=\"x-date\", signature=\"' +\r\n    HMAC +\r\n    '\"';\r\n\r\n  return {\r\n    Authorization: Authorization,\r\n    \"X-Date\": GMTString /*,'Accept-Encoding': 'gzip'*/,\r\n  }; //如果要將js運行在伺服器，可額外加入 'Accept-Encoding': 'gzip'，要求壓縮以減少網路傳輸資料量\r\n}\r\n","import axios from \"axios\";\r\nimport { GetAuthorizationHeader } from \"./auth\";\r\n\r\nclass BusService {\r\n  getNearby = async (coordinates) => {\r\n    // /v2/Bus/Station/NearBy 取得指定[位置,範圍]的全臺公車站位資料\r\n    const url = `https://ptx.transportdata.tw/MOTC/v2/Bus/Station/NearBy?$top=30&$spatialFilter=nearby(${coordinates.lat},${coordinates.lng},150)&$format=JSON`;\r\n    const options = {\r\n      headers: GetAuthorizationHeader(),\r\n    };\r\n    try {\r\n      const res = await axios.get(url, options);\r\n      const data = res.data;\r\n      // console.log(data);\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  getStopOfRoute = async (routeName) => {\r\n    //v2/Bus/DisplayStopOfRoute/City/{City}/{RouteName} 取得指定[縣市],[路線名稱]的市區公車顯示用路線站序資料\r\n    const url = `https://ptx.transportdata.tw/MOTC/v2/Bus/DisplayStopOfRoute/City/Taipei/${routeName}?$format=JSON`;\r\n    const options = {\r\n      headers: GetAuthorizationHeader(),\r\n    };\r\n    try {\r\n      const res = await axios.get(url, options);\r\n      const data = res.data;\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  getEstimateTime = async (routeName) => {\r\n    // 取得指定[縣市],[路線名稱]的公車預估到站資料\r\n    const url = `https://ptx.transportdata.tw/MOTC/v2/Bus/EstimatedTimeOfArrival/City/Taipei/${routeName}?$select=StopID%2CStopName&$format=JSON`;\r\n    const options = {\r\n      headers: GetAuthorizationHeader(),\r\n    };\r\n    try {\r\n      const res = await axios.get(url, options);\r\n      const data = res.data;\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n}\r\n\r\nexport default new BusService();\r\n","import React, { useState, useEffect } from \"react\";\r\nimport BusService from \"../../api/services\";\r\nimport { formatTime } from \"../../api/helper\";\r\n\r\nconst List = ({ routeName }) => {\r\n  const [timeData, setTimeData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (routeName) {\r\n      BusService.getEstimateTime(routeName)\r\n        .then((data) => {\r\n          setTimeData(data);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [routeName]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>{routeName}</h1>\r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>預估到站時間</th>\r\n            <th>站名</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {timeData &&\r\n            timeData.map((stop) => (\r\n              <tr>\r\n                {/* <td>{stop.EstimateTime}</td> */}\r\n                <td>{global.helper.formatTime(stop.EstimateTime)}</td>\r\n                <td>{stop.StopName.Zh_tw}</td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n"],"sourceRoot":""}